{
	"info": {
		"_postman_id": "fce12e5f-a4ce-46bd-b016-d7e1cc18c1a7",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test random users",
			"item": [
				{
					"name": "get random user using postman random number generator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// this will fail ofter because {{$randomInt}} returns int from 0 to 1000\r",
									"\r",
									"pm.test('status is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('reponse is json', () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('geo data is set', () => {\r",
									"    pm.expect(response.address).to.be.an('object');\r",
									"    pm.expect(response.address.geo).to.be.an('object');\r",
									"    pm.expect(response.address.geo.lat).to.be.a('string');\r",
									"    pm.expect(response.address.geo.lng).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/{{$randomInt}}",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"{{$randomInt}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get random user using postman random number generator and some code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('status is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('reponse is json', () => {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"response time is less than 1000ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('geo data is set', () => {\r",
									"    pm.expect(response.address).to.be.an('object');\r",
									"    pm.expect(response.address.geo).to.be.an('object');\r",
									"    pm.expect(response.address.geo.lat).to.be.a('string');\r",
									"    pm.expect(response.address.geo.lng).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomInt = pm.variables.replaceIn('{{$randomInt}}');\r",
									"\r",
									"const randomIntFrom0to10 = (randomInt % 10) + 1;\r",
									"\r",
									"pm.environment.set(\"randomInt\", randomIntFrom0to10);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/{{randomInt}}",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"{{randomInt}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('reponse is json', () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.test('retrieved user has same Id as Id from enviroment variables', () => {\r",
							"    pm.expect(response.id).to.be.eql(Number(pm.environment.get('userId')));\r",
							"});\r",
							"\r",
							"pm.test('geo data is set', () => {\r",
							"    pm.expect(response.address).to.be.an('object');\r",
							"    pm.expect(response.address.geo).to.be.an('object');\r",
							"    pm.expect(response.address.geo.lat).to.be.a('string');\r",
							"    pm.expect(response.address.geo.lng).to.be.a('string');\r",
							"});\r",
							"\r",
							"// save geo data in environment variables\r",
							"pm.environment.set('lat', response.address.geo.lat);\r",
							"pm.environment.set('lng', response.address.geo.lng);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/{{userId}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get weather",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status is 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('reponse is json', () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"response time is less than 1000ms\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?appid=0ed761300a2725ca778c07831ae64d6e&lat={{lat}}&lon={{lng}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "appid",
							"value": "0ed761300a2725ca778c07831ae64d6e"
						},
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lng}}"
						}
					]
				}
			},
			"response": []
		}
	]
}